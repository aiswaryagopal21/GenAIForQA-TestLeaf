Prompt: Convert Selenium Java Code to Playwright TypeScript

Context:
You are an AI assistant to convert Selenium Java automation code into Playwright TypeScript for modern web testing.

Given the following Selenium Java code snippet:  

"package week2.day1;


import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

import io.github.bonigarcia.wdm.WebDriverManager;

public class LearnDropdown {
	
	public static void main(String[] args) {
		
		// Step 0) Setup the chromedriver using webdrivermanager software
		WebDriverManager.chromedriver().setup(); // .exe or binary
		
		// Step 1) Launch the chrome browser (Class Name -> ChromeDriver)
		ChromeDriver driver = new ChromeDriver();
		
		// Step 2) Load the URL (http://leaftaps.com/opentaps/control/main) -> get
		driver.get("http://leafground.com/pages/Dropdown.html");
		
		// Step 3) Maximize the chrome browser
		driver.manage().window().maximize();
		
		// First find the drop down
		WebElement eleProgram = driver.findElement(By.id("dropdown1"));
		
		// Convert the element to Dropdown -> Select
		Select dd = new Select(eleProgram);
		
		// Then select the value (3 ways)
		// Approach 1: Using Visible (text) -> Working in english language, choose based on test data
		dd.selectByVisibleText("Selenium");
		// Approach 2: Using the value (attribute) -> Multi lingual -> Value is the best choice
		// dd.selectByValue("2");
		// Approach 3: Using the index (count) -> Choose randomly 
		// dd.selectByIndex(2);

	}

}"

We want ONLY a Playwright TypeScript PAGE OBJECT CLASS for that code.

Instructions:

- Implementation guidelines:
  - Use TypeScript with Playwrightâ€™s latest stable version
  - Use Playwright Test runner (@playwright/test)
  - Import required Playwright modules
  - Add JSDoc comments for class and methods
  - [MANDATORY] Every method should have proper comments above method signature
  - Do not send any explanation or additional text
  - Use selectOption({ label: '...' }) for dropdowns
  - [CRITICAL] Use the best locator strategy: `getByRole`, `getByLabel`, `getByPlaceholder`, `getByTestId`, and finally `locator(selector)`


---------------------------------------------------------------------------------------------------------------------------------------------

import { test, expect, Page } from '@playwright/test';

/**
 * Page Object Class for Dropdown Page
 */
class DropdownPage {
  private page: Page;

  /**
   * Constructor to initialize page
   * @param page Playwright Page object
   */
  constructor(page: Page) {
    this.page = page;
  }

  /**
   * Navigate to the Dropdown page URL
   */
  async navigate(): Promise<void> {
    await this.page.goto('https://demoqa.com/select-menu');
  }

  /**
   * Select dropdown option by visible text
   * @param optionText The visible text of the dropdown option
   */
  async selectOptionByText(optionText: string): Promise<void> {
    await this.page.locator('#oldSelectMenu').selectOption({ label: optionText });
  }
}

test('Select option from dropdown', async ({ page }) => {
  const dropdownPage = new DropdownPage(page);
  await dropdownPage.navigate();
  await dropdownPage.selectOptionByText('Purple');

  // Verify the selected value
  const selectedValue = await page.locator('#oldSelectMenu').inputValue();
  expect(selectedValue).toBe('4'); // 'Purple' has value '4' on this page
});

